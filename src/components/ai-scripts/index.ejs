<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Interview Simulation</title>
    <link rel="stylesheet" href="/views/style.css" />
    <!-- The styles are now in a separate style.css file -->
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
                Helvetica, Arial, sans-serif;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f2f5;
        }


        #controls {
            text-align: center;
        }


        button {
            padding: 1rem 2rem;
            font-size: 1.5rem;
            cursor: pointer;
            border-radius: 8px;
            border: none;
            background-color: #007bff;
            color: white;
            margin-bottom: 2rem;
        }



        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }


        #transcript-container {
            width: 80%;
            max-width: 600px;
            background-color: white;
            border-radius: 8px;
            padding: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            min-height: 100px;
            font-size: 1.2rem;
            line-height: 1.6;
            color: #333;
        }

        #transcript-container .highlight {
            background-color: yellow;
            font-weight: bold;
        }

        textarea {
            width: 80%;
            max-width: 580px;
            margin-top: 1rem;
            padding: 10px;
            font-size: 1rem;
            border-radius: 4px;
            border: 1px solid #ccc;
        }
    </style>
</head>

<body>
    <div id="controls">
        <button id="start-interview-btn">Start Interview</button>
        <button id="new-question-btn" style="display: none;">New Question</button>
        <button id="start-recording-btn">Start Recording</button>
        <button id="stop-recording-btn" disabled>Stop Recording</button>
        <button id="text-input-btn">Submit Text</button>
        <textarea id="text-input" placeholder="Enter your answer"></textarea>
        <button id="end-interview-btn" style="display: none;">End Interview</button>
    </div>
    <div id="transcript-container">
        <p>Click the button to start the interview...</p>
    </div>

    <script type="module">
        import generateSpeech from "/tts/speechGen.js";

        // --- Speech Recognition Setup ---
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        let recognition;
        if (SpeechRecognition) {
            recognition = new SpeechRecognition();
            recognition.continuous = true;
            recognition.interimResults = true;
        } else {
            console.warn("Speech Recognition not supported in this browser.");
            document.getElementById("start-recording-btn").disabled = true;
        }

        let interviewInProgress = false;

        const startInterviewBtn = document.getElementById("start-interview-btn");
        const newQuestionBtn = document.getElementById("new-question-btn");
        const textInput = document.getElementById("text-input");
        const textInputBtn = document.getElementById("text-input-btn");
        const endInterviewBtn = document.getElementById("end-interview-btn");
        const startRecordingBtn = document.getElementById("start-recording-btn");
        const stopRecordingBtn = document.getElementById("stop-recording-btn");
        const transcriptContainer = document.getElementById("transcript-container");

        // --- UI State Management ---
        function setUIState(state) {
            const isInterviewing = state === 'interviewing';
            const isRecording = state === 'recording';
            const isProcessing = state === 'processing';

            startInterviewBtn.style.display = isInterviewing || isProcessing ? 'none' : 'inline-block';
            endInterviewBtn.style.display = isInterviewing || isProcessing ? 'inline-block' : 'none';
            newQuestionBtn.style.display = isInterviewing || isProcessing ? 'inline-block' : 'none';

            startRecordingBtn.disabled = !SpeechRecognition || isRecording || isProcessing || !interviewInProgress;
            stopRecordingBtn.disabled = !isRecording;
            textInputBtn.disabled = isRecording || isProcessing || !interviewInProgress;
            newQuestionBtn.disabled = isRecording || isProcessing || !interviewInProgress;
        }

        // --- Event Listeners ---
        startInterviewBtn.addEventListener("click", async () => {
            interviewInProgress = true;
            setUIState('processing');
            transcriptContainer.innerHTML = "<p>Starting interview...</p>";
            await askQuestion(); // Ask the first question
        });

        endInterviewBtn.addEventListener("click", () => {
            window.speechSynthesis.cancel();
            if (recognition) recognition.stop();
            interviewInProgress = false;
            setUIState('initial');
            transcriptContainer.innerHTML = "<p>Interview ended. Click 'Start Interview' to begin again.</p>";
        });

        newQuestionBtn.addEventListener("click", async () => {
            setUIState('processing');
            transcriptContainer.innerHTML = "<p>Generating a new question...</p>";
            const response = await fetch("/api/new-interview-question", { method: "POST" });
            await handleQuestionResponse(response);
        });

        textInputBtn.addEventListener("click", async () => {
            const userResponse = textInput.value;
            if (!userResponse.trim()) return;
            textInput.value = ""; // Clear the input
            setUIState('processing');
            await askQuestion(userResponse);
        });

        startRecordingBtn.addEventListener("click", () => {
            if (!recognition) return;
            setUIState('recording');
            textInput.value = '';
            textInput.placeholder = 'Listening... Speak your answer now.';
            recognition.start();
        });

        stopRecordingBtn.addEventListener("click", () => {
            if (!recognition) return;
            recognition.stop();
            // The 'end' event will handle the rest.
        });

        // --- Speech Recognition Handlers ---
        if (recognition) {
            recognition.onresult = (event) => {
                let interimTranscript = '';
                let finalTranscript = '';
                for (let i = event.resultIndex; i < event.results.length; ++i) {
                    if (event.results[i].isFinal) {
                        finalTranscript += event.results[i][0].transcript;
                    } else {
                        interimTranscript += event.results[i][0].transcript;
                    }
                }
                textInput.value = finalTranscript + interimTranscript;
            };

            recognition.onend = () => {
                setUIState('processing');
                textInput.placeholder = 'Enter your answer';
                const userResponse = textInput.value;
                if (userResponse.trim()) {
                    askQuestion(userResponse);
                } else {
                    setUIState('interviewing'); // Nothing was said, go back to ready state
                }
            };
        }

        // --- Core Functions ---
        async function askQuestion(userResponse = null) {
            try {
                transcriptContainer.innerHTML = userResponse ? "<p>Processing your answer and generating next question...</p>" : "<p>Generating question...</p>";
                const response = await fetch("/api/interview-question", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: userResponse ? JSON.stringify({ userResponse }) : JSON.stringify({}),
                });
                await handleQuestionResponse(response);
            } catch (error) {
                console.error(error);
                transcriptContainer.innerHTML = `<p style="color: red;">Error: ${error.message}</p>`;
                setUIState('interviewing');
            }
        }

        async function handleQuestionResponse(response) {
            if (!response.ok) throw new Error("Failed to fetch question.");
            const data = await response.json();
            generateSpeech(data.transcript, transcriptContainer);
            setUIState('interviewing');
        }

        // Initial state
        setUIState('initial');
    </script>
</body>

</html>